Imports System.Reflection.Emit
Imports System.Security.Cryptography
Imports Newtonsoft.Json.Linq

Public Class PersonData
    Public Property Info As String = String.Empty
    Public Property Value As String = String.Empty
End Class

Public Class Server_Utils

    Public ReadOnly BaseURL As String = "http://pagoenlinea.hidrocapital.gob.ve"
    Public ReadOnly Post_Url As String = BaseURL & "/multistep.php"
    Public ErrorMsg As String = String.Empty

    Public Property WebEngine As Core.WebKit.IE_Hook = Nothing
    Public Sub New()
        WebEngine = New Core.WebKit.IE_Hook
    End Sub

    Public Function ParseToJson(ByVal ID As String, ByVal PerData As List(Of PersonData)) As String
        Dim Data As New List(Of JProperty)
        Dim IntExer As Integer = 0
        Dim TempDic As New Dictionary(Of String, String)

        For Each PData As PersonData In PerData
            Dim KeyEx As String = PData.Info
            If TempDic.ContainsKey(KeyEx) = True Then
                KeyEx = KeyEx & IntExer
                IntExer += 1
            End If
            TempDic.Add(KeyEx, PData.Value)
            Data.Add(New JProperty(KeyEx, PData.Value))
        Next

        Dim ToJson As JObject = New JObject(New JProperty(ID, New JObject(Data.ToArray)))
        TempDic.Clear()
        Return ToJson.ToString
    End Function

    Public Async Function ParseUserData(ByVal Data_html As String) As Task(Of List(Of PersonData))

        Dim Persona As List(Of PersonData) = New List(Of PersonData)

        Try
            If String.IsNullOrEmpty(Data_html) Then
                Throw New Exception("Empty HTML Code.")
            End If

            Dim ParsedDocument As HtmlDocument = Await WebEngine.GetHtmlDocument(Data_html)

            If ParsedDocument Is Nothing Then
                Throw New Exception("Error to Parsing.")
            End If

            For Each ParentTag As HtmlElement In ParsedDocument.getElementsByTagAndClassName("div", "row")
                Dim InnerSource As HtmlDocument = Await WebEngine.GetHtmlDocument(ParentTag.InnerHtml)

                For Each ChildDiv As HtmlElement In InnerSource.getElementsByTagAndClassName("div")
                    Dim ChildInnerSource As HtmlDocument = Await WebEngine.GetHtmlDocument(ChildDiv.InnerHtml)
                    Dim NewPersonData = New PersonData

                    Dim Inputs As List(Of HtmlElement) = ChildInnerSource.getElementsByTagAndClassName("input")
                    Dim Labels As List(Of HtmlElement) = ChildInnerSource.getElementsByTagAndClassName("label")

                    Dim Index As Integer = 0

                    If Labels.Count >= Inputs.Count Then


                        For Each Label As HtmlElement In Labels
                            Dim Parameter = Label.InnerText
                            Dim Value = Inputs(Index).GetAttribute("value")
                            NewPersonData.Info = Parameter
                            NewPersonData.Value = Value
                            Index += 1
                        Next

                    ElseIf Inputs.Count > Labels.Count Then

                        Dim ArrayLenth As Integer = (Labels.Count - 1)
                        Dim LastLabel As HtmlElement = Nothing
                        For Each Input As HtmlElement In Inputs

                            If Index <= ArrayLenth Then
                                LastLabel = Labels(Index)
                            End If

                            Dim Parameter = LastLabel.InnerText
                            Dim Value = Input.GetAttribute("value")
                            NewPersonData.Info = Parameter

                            If String.IsNullOrEmpty(NewPersonData.Value) = True Then
                                NewPersonData.Value = Value
                            Else
                                NewPersonData.Value += vbNewLine & Value
                            End If



                            Index += 1
                        Next


                    End If

                    If String.IsNullOrEmpty(NewPersonData.Value) = False Then Persona.Add(NewPersonData)
                Next

            Next

            Return Persona
        Catch ex As Exception
            ErrorMsg = ex.Message
            Return Persona
        End Try
    End Function


    Public Function Get_UserData(ByVal ID As String) As String
        Return Utils.SendPost(Post_Url, "nombre=" & ID)
    End Function

End Class
